"""
Django settings for ZKY_Backend project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import logging
import logging.handlers
from collections import UserString
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

CACHE_DEBUG = False
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-%diwasdasdfu6*@s2qx73n$vll_6^b)%omng4kgnzwx#lzzj_79*=m*c'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'silk',
    'rest_framework',

    
    'user.apps.UserConfig',
    'post.apps.PostConfig',
    'data_analysis.apps.DataAnalysisConfig',
    # 'debug_toolbar',

]
INTERNAL_IPS = [
      '127.0.0.1',
      '192.168.241.51',
    '112.253.2.6',
    '221.216.205.86',
  ]
# DEBUG_TOOLBAR_PANELS = [
#     'debug_toolbar.panels.history.HistoryPanel',
#     'debug_toolbar.panels.versions.VersionsPanel',
#     'debug_toolbar.panels.timer.TimerPanel',
#     'debug_toolbar.panels.settings.SettingsPanel',
#     'debug_toolbar.panels.headers.HeadersPanel',
#     'debug_toolbar.panels.request.RequestPanel',
#     'debug_toolbar.panels.sql.SQLPanel',
#     'debug_toolbar.panels.staticfiles.StaticFilesPanel',
#     'debug_toolbar.panels.templates.TemplatesPanel',
#     'debug_toolbar.panels.cache.CachePanel',
#     'debug_toolbar.panels.signals.SignalsPanel',
#     'debug_toolbar.panels.logging.LoggingPanel',
#     'debug_toolbar.panels.redirects.RedirectsPanel',
#     'debug_toolbar.panels.profiling.ProfilingPanel',
# ]
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    #'django.contrib.sessions.middleware.SessionMiddleware',
     'user.middlewares.TokenSessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'silk.middleware.SilkyMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
# 'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'pyinstrument.middleware.ProfilerMiddleware',
]
# PYINSTRUMENT_PROFILE_DIR = 'profiles'
ROOT_URLCONF = 'ZKY_Backend.urls'
#
# # 使用Python的内置cProfile分析器
# SILKY_PYTHON_PROFILER = True
#
# # 生成.prof文件，silk产生的程序跟踪记录，详细记录来执行来哪个文件，哪一行，用了多少时间等信息
# SILKY_PYTHON_PROFILER_BINARY = True
#
# # .prof文件保存路径
# SILKY_PYTHON_PROFILER_RESULT_PATH = 'silk/profiles'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ZKY_Backend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'dj_db_conn_pool.backends.mysql',
        'NAME': 'tech',
        'USER':'oopin',
        'PASSWORD':'OOpin2007Group',
        'HOST':'192.168.241.51',
        'port':3306,

    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False # False才会使用上面自定义的时区


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'




# 自定义配置
TOKEN_SECRET_KEY = '1328a02#c@ac^c31&1eb*ba(ee)14_4f+8a!ad~89;88'
STATIC_ROOT = BASE_DIR/'static'
MEDIA_ROOT = STATIC_ROOT / 'media'
MEDIA_URL = '/media/'
RESOURCE_ROOT = BASE_DIR/'resources'

SESSION_COOKIE_SAMESITE = 'None'
SESSION_COOKIE_SECURE = True

LOG_PATH = BASE_DIR/'logs'
if not LOG_PATH.exists():
    LOG_PATH.mkdir()

ZKY_INDEX = 'kejisousou-formal'
# ZKY_INDEX = 'kejisousou-testv5'
# ZKY_EN_INDEX = 'kejisousou-en-testv3'
ZKY_EN_INDEX = 'kejisousou-en-formal'
# ZKY_YUCE_INDEX = 'kejisousou-yuce-test'
ZKY_YUCE_INDEX = 'kejisousou-yuce-formal-v3'
ZKY_EN_YUCE_INDEX = 'kejisousou-en-yuce-formal-v1'
# ZKY_ZHILI_INDEX = 'kejisousou-zhili-test'
ZKY_ZHILI_INDEX = 'kejisousou-zhili-formal-v3'
ZKY_EN_ZHILI_INDEX = 'kejisousou-en-zhili-formal-v1'

INDEX_DATE_FUNC_MAP = {
    ZKY_INDEX: lambda x: 'v1-'+''.join(x.split()[0].split('-')[:2]) if isinstance(x, (str, UserString)) else x.strftime('%Y%m'),
    ZKY_EN_INDEX: lambda x: '-'+''.join(x.split()[0].split('-')[:2]) if isinstance(x, (str, UserString)) else x.strftime('%Y%m'),
    'kejisousou-points-formal': lambda x: 'v1-'+''.join(x.split()[0].split('-')[:2]) if isinstance(x, (str, UserString)) else x.strftime('%Y%m'),
}

HIGH_LIGHT_TAG = 'span'
HIGH_LIGHT_STYLE = 'style="color:#EF5F3C;font-size:14px;font-weight: bold;"'

# 错误代码集合
ERROR_MSG_MAP = {
    'NO_CACHE': (408, '页面加载卡住了，请您重新搜索关键词'),
    'NO_DB_KEYWORD': (411, "必要搜索关键词少于一个，请至少填入一个关键词，并且只有第一个关键词生效"),
    'CAN_NOT_JUDGE_WITCH_SEARCH': (410, "无法判断使用哪种搜索方式"),
}

# cache
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://192.168.241.20:6379/4",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "simhash_zj_point": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://192.168.241.20:6379/6",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

# 日志
LOGGING = {
    'version': 1,  # 保留字
    'disable_existing_loggers': False,  # 禁用已经存在的logger实例
    # 日志文件的格式
    'formatters': {
        # 详细的日志格式
        'standard': {
            'format': '[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]'
                      '[%(levelname)s][%(message)s]'
        },
        # 简单的日志格式
        'simple': {
            'format': '[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s'
        },
        # 定义一个特殊的日志格式
        'collect': {
            'format': '%(message)s'
        }
    },
    # 过滤器
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    # 处理器
    'handlers': {
        'console': {     # 在终端打印
            'level': 'DEBUG',
            'filters': ['require_debug_true'],  # 只有在Django debug为True时才在屏幕打印日志
            'class': 'logging.StreamHandler',  #
            'formatter': 'simple'
        },
        'default': {    # 默认的
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': LOG_PATH/"all.log",  # 日志文件
            'maxBytes': 1024 * 1024 * 50,                    # 日志大小 50M
            'backupCount': 3,                                # 最多备份几个
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
        'error': {   # 专门用来记错误日志
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': LOG_PATH/"error.log",  # 日志文件
            'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
            'backupCount': 5,
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
        'collect': {   # 专门定义一个收集特定信息的日志
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': LOG_PATH/"collect.log",
            'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
            'backupCount': 5,
            'formatter': 'collect',
            'encoding': "utf-8"
        },
        'scprits_handler': {
            'level':'DEBUG',
            'class':'logging.handlers.RotatingFileHandler',
            'filename': LOG_PATH/"script.log",
            'maxBytes': 1024*1024*5,
            'backupCount': 5,
            'formatter':'standard',
        }
    },
    'loggers': {
        'mxlog': {             # 默认的logger应用如下配置
            'handlers': ['default', 'console', 'error'],  # 上线之后可以把'console'移除
            'level': 'DEBUG',
            'propagate': True,  # 向不向更高级别的logger传递
        },
        'collect': {      # 名为 'collect'的logger还单独处理
            'handlers': ['console', 'collect'],
            'level': 'INFO',
        },
        'scripts': {
            'handlers': ['scprits_handler'],
            'level': 'INFO',
            'propagate': False
        },
    },
}


# 配置允许跨站访问本站的地址
CORS_ORIGIN_ALLOW_ALL = True
CORS_ORIGIN_WHITELIST = (
    'asd.maixunbytes.com:8080',
    'asd.maixunbytes.com:8082',
    'test.maixunbytes.com:9090',
    'test.maixunbytes.com:9096',
    'cem.maixunbytes.com:9999',
    'cem.maixunbytes.com',
    '112.253.2.6:9090',
    '61.179.50.133',
    'xhs.fantacing.cn',
    'xhs.fantacing.cn:9999',
    '61.179.50.133:9999',
    'foreo.mxspider.top',
    'yuqingsee.com',
    'www.yuqingsee.com',
    'shcn.yuqingsee.com',
    'shcn.maixunbytes.com',
    'shcn.mxspider.top',
    'shcn.yuqingsee.com:9999',
    '*.yuqingsee.com',
    'shsm.maixunbytes.com',
    'shsm.yuqingsee.com',
    'talkinddata.mxspider.top',
    'shcndp.yuqingsee.com',
    'cas.maixunbytes.com',
)
CORS_ALLOW_CREDENTIALS = True

# 默认值是全部:
# CORS_ORIGIN_WHITELIST = ()  # 或者定义允许的匹配路径正则表达式.
# CORS_ORIGIN_REGEX_WHITELIST = ('^(https?://)?(\w+.)?>google.com$', )   # 默认值:
# CORS_ORIGIN_REGEX_WHITELIST = ()

CORS_ALLOW_METHODS = (
    'GET',
    'POST',
    # 'PUT',
    # 'PATCH',
    # 'DELETE',
    # 'OPTIONS'
)

# 设置允许的header：
CORS_ALLOW_HEADERS = (
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'X-CSRFToken',
    'token'
)
